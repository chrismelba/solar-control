#!/usr/bin/python3

from flask import Flask, render_template, jsonify, request, redirect, url_for, send_from_directory
import os
import logging
import json
import requests

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Create static directory if it doesn't exist
static_dir = '/usr/bin/static'
if not os.path.exists(static_dir):
    os.makedirs(static_dir)

app = Flask(__name__, 
           static_folder=static_dir,
           template_folder='templates')

# Log static file configuration
logger.info('Static folder: %s', app.static_folder)
logger.info('Static URL path: %s', app.static_url_path)
logger.info('Static files available:')
for root, dirs, files in os.walk(static_dir):
    for file in files:
        logger.info('  %s', os.path.join(root, file))

# Configuration file path
CONFIG_FILE = '/data/solar_config.json'

def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    return {
        'solar_generation': '',
        'grid_power': '',
        'solar_forecast': ''
    }

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f)

def get_hass_entities():
    # Get Home Assistant token from environment
    supervisor_token = os.environ.get('SUPERVISOR_TOKEN')
    
    if not supervisor_token:
        logger.error("No SUPERVISOR_TOKEN found in environment")
        return []
    
    # Debug log the token (first 10 chars only for security)
    logger.debug(f"SUPERVISOR_TOKEN found: {supervisor_token[:10]}...")
    
    try:
        headers = {
            "Authorization": f"Bearer {supervisor_token}",
            "Content-Type": "application/json",
        }
        
        # Use the standard Home Assistant add-on URL
        hass_url = "http://supervisor/core"
        logger.debug(f"Attempting to access Home Assistant at: {hass_url}/api/states")
        
        # Get states from Home Assistant
        response = requests.get(f"{hass_url}/api/states", headers=headers)
        response.raise_for_status()
        
        entities = response.json()
        logger.debug(f"Successfully retrieved {len(entities)} entities from Home Assistant")
        
        # Log some example entities for debugging
        for entity in entities[:5]:
            logger.debug(f"Example entity: {entity.get('attributes', {}).get('friendly_name')} ({entity.get('entity_id')})")
        
        return entities
    except Exception as e:
        logger.error(f"Failed to get entities from Home Assistant: {e}")
        return []

def get_sensor_value(entity_id):
    if not entity_id:
        return None
        
    supervisor_token = os.environ.get('SUPERVISOR_TOKEN')
    if not supervisor_token:
        return None
        
    try:
        headers = {
            "Authorization": f"Bearer {supervisor_token}",
            "Content-Type": "application/json",
        }
        
        hass_url = "http://supervisor/core"
        response = requests.get(f"{hass_url}/api/states/{entity_id}", headers=headers)
        response.raise_for_status()
        
        entity = response.json()
        return {
            'state': entity.get('state'),
            'friendly_name': entity.get('attributes', {}).get('friendly_name'),
            'unit': entity.get('attributes', {}).get('unit_of_measurement')
        }
    except Exception as e:
        logger.error(f"Failed to get sensor value for {entity_id}: {e}")
        return None

@app.route('/')
def index():
    logger.debug('Received request for index page')
    config = load_config()
    sensor_values = {
        'solar_generation': get_sensor_value(config.get('solar_generation')),
        'grid_power': get_sensor_value(config.get('grid_power')),
        'solar_forecast': get_sensor_value(config.get('solar_forecast'))
    }
    return render_template('index.html', sensor_values=sensor_values)

@app.route('/configure/solar', methods=['GET', 'POST'])
def configure_solar():
    logger.debug('Received request for solar configuration page')
    
    if request.method == 'POST':
        config = {
            'solar_generation': request.form.get('solar_generation'),
            'grid_power': request.form.get('grid_power'),
            'solar_forecast': request.form.get('solar_forecast')
        }
        save_config(config)
        return redirect(url_for('configure_solar'))
    
    # Get Home Assistant entities
    entities = get_hass_entities()
    config = load_config()
    
    # Get current sensor values
    sensor_values = {
        'solar_generation': get_sensor_value(config.get('solar_generation')),
        'grid_power': get_sensor_value(config.get('grid_power')),
        'solar_forecast': get_sensor_value(config.get('solar_forecast'))
    }
    
    return render_template('configure_solar.html', 
                         entities=entities,
                         config=config,
                         sensor_values=sensor_values)

@app.route('/configure/battery')
def configure_battery():
    logger.debug('Received request for battery configuration page')
    return render_template('configure_battery.html')

@app.route('/configure/devices')
def configure_devices():
    logger.debug('Received request for devices configuration page')
    return render_template('configure_devices.html')

@app.route('/api/status')
def status():
    logger.debug('Received request for status API')
    config = load_config()
    sensor_values = {
        'solar_generation': get_sensor_value(config.get('solar_generation')),
        'grid_power': get_sensor_value(config.get('grid_power')),
        'solar_forecast': get_sensor_value(config.get('solar_forecast'))
    }
    return jsonify({
        'status': 'running',
        'version': '1.0.0',
        'sensor_values': sensor_values
    })

# Debug route to check static files
@app.route('/debug/static/<path:filename>')
def debug_static(filename):
    logger.debug('Debug request for static file: %s', filename)
    try:
        return send_from_directory(app.static_folder, filename)
    except Exception as e:
        logger.error('Error serving static file %s: %s', filename, e)
        return str(e), 500

if __name__ == '__main__':
    logger.info('Starting Flask application...')
    logger.info('Templates directory: %s', app.template_folder)
    logger.info('Static directory: %s', app.static_folder)
    app.run(host='0.0.0.0', port=8080, debug=True)
